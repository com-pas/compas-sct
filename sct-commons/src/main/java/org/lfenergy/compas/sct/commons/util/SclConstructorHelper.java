/*
 * // SPDX-FileCopyrightText: 2022 RTE FRANCE
 * //
 * // SPDX-License-Identifier: Apache-2.0
 */

package org.lfenergy.compas.sct.commons.util;

import org.apache.commons.lang3.StringUtils;
import org.lfenergy.compas.scl2007b4.model.*;

import java.math.BigDecimal;
import java.util.List;

/**
 * A helper class that provides constructors to easily create instances of Jaxb classes generated by xjc.
 * xjc only provides NoArgConstructors on generated classes.
 * This utility class provides constructors with the most relevant attributes.
 */
public final class SclConstructorHelper {

    private static final String SECOND = "s";
    private static final String MILLI = "m";

    private SclConstructorHelper() {
        throw new UnsupportedOperationException("This is a utility class and cannot be instantiated");
    }

    /**
     * Create new instance of TP
     *
     * @param type  type attribute
     * @param value value attribute
     * @return new instance of TP initialized with the given parameters
     */
    public static TP newP(String type, String value) {
        TP tp = new TP();
        tp.setType(type);
        tp.setValue(value);
        return tp;
    }

    /**
     * Create new instance of TDurationInMilliSec
     *
     * @param value      value attribute
     * @param unit       unit attribute
     * @param multiplier multiplier attribute
     * @return new instance of TDurationInMilliSec initialized with the given parameters
     */
    public static TDurationInMilliSec newDurationInMilliSec(BigDecimal value, String unit, String multiplier) {
        TDurationInMilliSec minTime = new TDurationInMilliSec();
        minTime.setUnit(unit);
        minTime.setMultiplier(multiplier);
        minTime.setValue(value);
        return minTime;
    }

    /**
     * Create new instance of TDurationInMilliSec with unit SECOND and multiplier MILLI.
     *
     * @param value value attribute
     * @return new instance of TDurationInMilliSec initialized with the given parameters
     * @see #newDurationInMilliSec(BigDecimal, String, String)
     */
    public static TDurationInMilliSec newDurationInMilliSec(long value) {
        return newDurationInMilliSec(new BigDecimal(value), SECOND, MILLI);
    }

    /**
     * Clone TDurationInMilliSec. The clone is independent of the tDurationInMilliSec because all fields are immutable.
     *
     * @param tDurationInMilliSec TDurationInMilliSec to clone
     * @return new instance of TDurationInMilliSec initialized with the given parameters
     * @see #newDurationInMilliSec(BigDecimal, String, String)
     */
    public static TDurationInMilliSec newDurationInMilliSec(TDurationInMilliSec tDurationInMilliSec) {
        if (tDurationInMilliSec == null) {
            return null;
        }
        return newDurationInMilliSec(tDurationInMilliSec.getValue(), tDurationInMilliSec.getUnit(), tDurationInMilliSec.getMultiplier());
    }

    /**
     * Create new instance of TAddress
     *
     * @param listOfP list of TP for setting the P attribute of the new TAddress
     * @return new instance of TAddress initialized with the given parameters.
     * P attribute of TAddress is a new list which contains the elements of listOfP (the given TP are not cloned).
     */
    public static TAddress newAddress(List<TP> listOfP) {
        TAddress address = new TAddress();
        address.getP().addAll(listOfP);
        return address;
    }

    /**
     * Create new instance of TConnectedAP
     *
     * @param iedName iedName attribute
     * @param apName  apName attribute
     * @return new instance of TConnectedAP initialized with the given parameters
     */
    public static TConnectedAP newConnectedAp(String iedName, String apName) {
        TConnectedAP tConnectedAP = new TConnectedAP();
        tConnectedAP.setIedName(iedName);
        tConnectedAP.setApName(apName);
        return tConnectedAP;
    }

    /**
     * Create new instance of TVal
     *
     * @param value  value attribute
     * @param sGroup sGroup attribute (can be null)
     * @return new instance of TVal initialized with the given parameters
     */
    public static TVal newVal(String value, Long sGroup) {
        TVal tVal = new TVal();
        tVal.setValue(value);
        if (sGroup != null) {
            tVal.setSGroup(sGroup);
        }
        return tVal;
    }

    /**
     * Create new instance of TVal with no sGroup
     *
     * @param value value attribute
     * @return new instance of TVal initialized with the given parameters
     */
    public static TVal newVal(String value) {
        return newVal(value, null);
    }

    public static TFCDA newFcda(String ldInst, String lnClass, String lnInst, String prefix, String doName, String daName, TFCEnum fc) {
        TFCDA tfcda = new TFCDA();
        tfcda.setLdInst(ldInst);
        if (StringUtils.isNotBlank(lnClass)) tfcda.getLnClass().add(lnClass);
        tfcda.setLnInst(lnInst);
        tfcda.setPrefix(prefix);
        tfcda.setDoName(doName);
        tfcda.setDaName(daName);
        tfcda.setFc(fc);
        return tfcda;
    }
}
